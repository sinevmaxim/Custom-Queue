//
// queue.cpp
// ‰Ω†Â•Ω
//
// Created by Maxim Sinev on 25.03.2020.
//

#include <iostream>

using namespace std;

struct Node
{
    // —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç –≤ –æ—á–µ—Ä–µ–¥–∏
    Node* next;
    // —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç –≤ –æ—á–µ—Ä–µ–¥–∏
    Node* prev;
    // –∑–Ω–∞—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –æ—á–µ—Ä–µ–¥–∏
    int value;
};

class Queue
{
public:
    // –ö–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Å–ø–∏—Å–∫–µ
    int n;
    int i;
    int size = 0;
    int size_1 = NULL;
    // –°—á–µ—Ç—á–∏–∫ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–∞ –æ–ø–µ—Ä–∞—Ü–∏–π
    unsigned long long int N_op = 0;
    // —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
    Node* head;
    // —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ —Ö–≤–æ—Å—Ç –æ—á–µ—Ä–µ–¥–∏
    Node* tail;

    // –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—á–µ—Ä–µ–¥–∏
    void Init() //–û(N)=2
    {
        head = NULL; //1
        // –ü—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ head –∏ tail = NULL
        tail = head; //1
    }

    // –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –Ω–∞—á–∞–ª–æ –æ—á–µ—Ä–µ–¥–∏, x - –∑–Ω–∞—á–µ–Ω–∏–µ —ç—Ç–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
    void Add(int x) //–û(N)=2+1+3+2+2+2+2+1+2+1+1+1+2+1=23
    {
        // —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ö–≤–æ—Å—Ç–∞, –µ—Å–ª–∏ –æ–Ω –Ω–µ Null
        Node* tmp = new Node; //2
        if (tail != NULL) //1
        {
            tmp = tail; //1
        }
        
        // —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        Node* node = new Node; //3
        // –≤ –ø–æ–ª–µ next –¥–∞–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è NULL
        node->next = NULL; //2
        // –≤ –ø–æ–ª–µ prev –¥–∞–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –æ—á–µ—Ä–µ–¥–∏
        node->prev = tmp; //2
        tmp->next = node; //2
        // –≤ –ø–æ–ª–µ value –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ —è—á–µ–π–∫–∏ –æ—á–µ—Ä–µ–¥–∏ int
        node->value = x; //2
        // –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –º—ã –ø—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤–µ—Ç–∫–µ else
        if (tail != NULL) //1
        {
            /* –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ —Ö–≤–æ—Å—Ç –≤ –æ—á–µ—Ä–µ–¥–∏,
            tail —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ –æ—á–µ—Ä–µ–¥–∏ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª—è–µ–º—ã–º
            –≤ –ø–æ–ª–µ next –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –∞–¥—Ä–µ—Å –Ω–æ–≤–æ–≥–æ –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞*/
            tail->next = node; //2
            // tail –Ω–∞—á–∏–Ω–∞–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ –æ—á–µ—Ä–µ–¥–∏
            tail = node; //1
        }
        else
        {
            // —Ö–≤–æ—Å—Ç —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ –æ—á–µ—Ä–µ–¥–∏
            tail = node; //1
            // –≥–æ–ª–æ–≤–∞ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ –æ—á–µ—Ä–µ–¥–∏
            head = tail; //1
        }
        size++; //2
    }

    // –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –ø—É—Å—Ç–æ—Ç—É
    bool IsEmpty() //–û(N)=1

    {
        //true, –µ—Å–ª–∏ head = NULL; false, –µ—Å–ª–∏ head —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –∫–∞–∫–æ–π-–ª–∏–±–æ —ç–ª–µ–º–µ–Ω—Ç –≤ –æ—á–µ—Ä–µ–¥–∏
        return head == NULL; //1
    }

    // —É–¥–∞–ª–µ–Ω–∏–µ —Å–∞–º–æ–≥–æ —Å—Ç–∞—Ä–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
    int Delete() //–û(N)=1+2+2+2+1+2+2+2=14
    {
        int val = NULL; //1

        if (IsEmpty() != 1) //2
        {
            Node* tmp = new Node;
            // –≤ —É–∫–∞–∑–∞—Ç–µ–ª—é—å tmp –∫–ª–∞–¥–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ next –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –æ—á–µ—Ä–µ–¥–∏
            tmp = head->next; //2
            // –≤ val –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –æ—á–µ—Ä–µ–¥–∏
            val = head->value; //2
            // —É–¥–∞–ª—è–µ–º –æ–±—ä–µ–∫—Ç –ø–æ —É–∫–∞–∑–∞—Ç–µ–ª—é head (–ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –≤ –æ—á–µ—Ä–µ–¥–∏)
            delete head;
            // head –Ω–∞—á–∏–Ω–∞–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –ø—Ä–µ–¥–ø–æc–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –≤ –æ—á–µ—Ä–µ–¥–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–π —É–¥–∞–ª–µ–Ω)
            head = tmp; //1

            // –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            if (IsEmpty() == 1) //2
            {
                Init(); //2
            }
            size--; //2
            // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –æ—á–µ—Ä–µ–¥–∏
            return val;
        }
        else { cout << "–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞!" << endl; }
        return 0;

    }

    // –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –∫–æ–Ω—Ü–∞ –æ—á–µ—Ä–µ–¥–∏
    int Value() //–û(N)=1+2=3
    {
        // –µ—Å–ª–∏ –æ—á–µ—Ä–µ–¥—å –Ω–µ –ø—É—Å—Ç–∞
        if (IsEmpty() != 1) //2
        {
            // —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞—Ç–µ–ª—å head –ø–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ value –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –æ—á–µ—Ä–µ–¥–∏
            return head->value; //1
        }
        else { cout << "–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞!" << endl; }
        return 0;
    }

};

class QueueType : public Queue
{
public:
    int Get(int x)
    {
        // –µ—Å–ª–∏ –æ—á–µ—Ä–µ–¥—å –Ω–µ –ø—É—Å—Ç–∞

        if (IsEmpty() != 1) //2
        {
            size_1 = size; //1
            int val1 = NULL; //1

            // –ü–µ—Ä–µ–±–æ—Ä –≤—Å–µ—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤ —Å–ø–∏—Å–∫–µ

            for (int i = 1; i < size_1 + 1; i++) //1+‚àë(1+4+1+27)=1+‚àë(33)=1+33ùëõùëõ1ùëõ1
                {
                    if (i == x) //1
                    {// –ö–æ–≥–¥–∞ i –¥–æ—Ö–æ–¥–∏—Ç –¥–æ –Ω–æ–º–µ—Ä–∞ –ø–æ–ª—É—á–∞–µ–º–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞, —Ç–æ –≤ val –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –¥–∞–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
                        val1 = Value(); //4
                    }
                    // –ü–µ—Ä–µ–±–æ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ —Å–ª—É—á–∞–µ –µ—Å–ª–∏ x –Ω–µ —Ä–∞–≤–µ–Ω –Ω—É–ª—é
                    if (x != 1) //1
                    {
                        // –í–Ω–∞—á–∞–ª–µ —ç–ª–µ–º–µ–Ω—Ç —É–¥–∞–ª—è–µ—Ç—Å—è –∏–∑ –∫–æ–Ω—Ü–∞ –æ—á–µ—Ä–µ–¥–∏, –∏ —Å—Ä–∞–∑—É –∂–µ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ –Ω–∞—á–∞–ª–æ –æ—á–µ—Ä–µ–¥–∏, –∏ —Ç–∞–∫ –≤ —Ü–∏–∫–ª–µ –ø–æ–∫–∞ –Ω–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏
                        Add(Delete()); //14+13=27
                    }
                    else
                    {
                        // –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ —Å—Ä–∞–∑—É –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞ for
                        break;
                    }
                }
            // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º x –∏–∑ –æ—á–µ—Ä–µ–¥–∏
            return val1;
        }
        else { cout << "–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞!" << endl; }
        return 0;
    };
    void Set(int x, int y) //2+2+41n=4+41n
    {
    // –µ—Å–ª–∏ –æ—á–µ—Ä–µ–¥—å –Ω–µ –ø—É—Å—Ç–∞
    if (IsEmpty() != 1) //2
    {
        size_1 = size;
        if (x <= size) //1+1+31n=2+41n
        {
            for (int i = 1; i < size_1 + 1; i++) //1+‚àë(1+2+1+37)ùëõ1=1+41ùëõ
            {
                if (i == x) //1
                {
                    // –ó–∞–ø–∏—Å—å –∑–Ω–∞—á–µ–Ω–∏—è y –≤ —Å–ø–∏—Å–æ–∫
                    head->value = y; //2
                }
                if (x != 1) //1
                {
                    Add(Delete()); //14+23=37
                }
                else
                {
                    break;
                }
            }
        }
        // –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
        else //1+2+1+‚àë(13)+13ùë•ùëõ+1=17+ ‚àë(13)ùë•ùëõ+1
        {
            if (x == size + 1) //2
            {
                //–ï—Å–ª–∏ –Ω–æ–º–µ—Ä —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ —Å–ø–∏—Å–∫–µ –Ω–∞ 1 –±–æ–ª—å—à–µ —Ä–∞–∑–º–µ—Ä–∞ –æ—á–µ—Ä–µ–¥–∏, –∑–Ω–∞—á–∏—Ç —ç–ª–µ–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ –Ω–∞—á–∞–ª–æ –æ—á–µ—Ä–µ–¥–∏
                Add(y);
            }
            else
            {
                for (i = size + 1; i < x; i++) //1+‚àë(13)ùë•ùëõ+1
                {
                    // –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –æ—á–µ—Ä–µ–¥—å –∑–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω—É–ª—è–º–∏
                    Add(0); //13
                }
                Add(y); //13
            }
        }
    }
    else { cout << "–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞!" << endl; }
    }
    
    void Sort()
    {
        for (int i = 1; i < size; i++)
        {
            for (int j = i; j > 0 && Get(j-1) > Get(j); j--)
            {
                int tmp = Get(j-1);
                Set(j-1, Get(j));
                Set(j, tmp);
            }
        }
    }
};


int main()
{
    setlocale(LC_ALL, "ru");
    srand(time(NULL));
    // –°—Ö–µ–º–∞ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—á–µ—Ä–µ–¥–∏ –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –∫–ª—é—á–µ–π
    int i, t_s, t_f;
    // –•—Ä–∞–Ω–∏–ª–∏—â–µ –∫–ª—é—á–µ–π
    int Key[3000];
    int N = 300;
    Numbers list;
    list.Init();
    for (i = 0; i < 3000; i++)
    {
    // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –∫–ª—é—á–µ–π —Å–ª—É—á–∞–π–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏ –¥–æ 1000
    Key[i] = rand() % 999;
    }
    for (i = 0; i < 10; i++)
    {
    for (int z = N - 300; z < N; z++)
    {
    list.Add(Key[z]);
    }
    list.N_op = 0;
    t_s = GetTickCount();
    list.sort(N);
    t_f = GetTickCount();
    cout << "–ù–æ–º–µ—Ä —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏: " << i + 1 << " –ö–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤: " << N << " –í—Ä–µ–º—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ (ms): " << t_f - t_s << endl; // –®–∞–≥ –≤ 300 —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    N = N + 300;
    }
    return 0;


}
